In math, there are numbers called complex numbers, and they are an essential part of it. That is why it’s important to make a program on the different ways we can use them. The coding language that is used is important as well. That is why I will be differentiating between Java, Python, and the C++ implementations of each language, as well as talking about the pros and cons of each language. Each class will have basic arithmetic functions that will be able to convert all the answers into complex numbers, even if there is a non-complex number.
 
The first programming language that will be discussed is Java. Java is the most different of the three since it doesn’t allow for operator overloading, which allows the user to redefine the basic arithmetic expressions (+,-,*,/); however, it does allow for method overloading, which allows the user to call a method the same name as a different method, but they have different parameters. Although this makes Java less flexible writability-wise, it allows for cleaner and clearer code with its well-defined method calls. Another pro of having no operator overloading is that it makes Java have more “type safety," but the con is that it might be less intuitive since you cannot use simple arithmetic expressions and that you have to use method calls to do them instead. Java also has platform independence, which allows Java code to be run on any device with the Java Virtual Machine (JVM). Java has automatic memory management through garbage collection, and allowing this simplifies memory management, but it can also reduce and impact performance.
 
The next programming language that will be discussed is C++. Unlike Java, C++ uses operator overloading, and differently from Python, it uses friend functions. A friend function is a function that is not a member of a class but has access to its private and protected members. Of the three languages, C++ is the fastest because it is a compiled language, meaning the source code will be translated into machine code, whereas the other two languages are interpreted languages, which get read line by line by the interpreter, and that gets translated into machine code. The con about C++ is its learning curve since it requires the user to sometimes deal with references, pointers, and even changing the memory address of a value, and unlike Java, C++ uses manual memory management, which does make your code run faster, but it can cause memory leaks.
 
The final programming language that will be discussed is Python. Of the three languages, Python is the most user-friendly one. Of the three languages, Python is dynamically typed, which allows the user to make variables without having to declare the types. This helps because Python only requires one constructor because it allows default values in its constructors. Again, Python also uses method overloading like C++, but instead of friend functions, it uses magic methods. Magic methods are named with double underscores (e.g., __add__). A con of Python is that since it is a dynamically typed language, it can lead to errors and can be hard to debug. It also has limited control over low-level system resources. Similar to Java, Python has automatic garbage collection, which allows the user to not have to worry about it; however, this does limit the control the programmer does have when it comes to memory management, and it does impact the performance and can occasionally cause the program to pause in the execution.

In conclusion, out of the three languages, I think the best language is C++. The reason for this is its speed and similarity to Java. Although it has a high learning curve, it is the best for implementing the complex class. The friend functions allow the computation of double x complex numbers, and the method overloading allows for the complex x complex and the complex to double computation. These reasons are why I believe that C++ is the best language of the three.
 







